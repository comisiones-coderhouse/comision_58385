CLASE 1 :

Escribir react estandar (vanilla) : 

    React.createElement("p", null, "Hello World!")

es similar a 

    document.createElement("p").appendChild(document.createTextNode("Hello World!"))





JSX : HTML + JS ( la idea que queremos )

    const parrafo = <p>Hola Mundo</p>


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------


CLASE 2 : 




COMPILADORES (Bundlers + Transpiladores)

Bundlers (Empaquetadores) :  Webpack, Parcel, Rollup, Browserify

    - Empaquetan los archivos y sus dependencias en un solo archivo final (bundle.js)


Transpiladores (Transformadores) :  Babel

    - Transforman el código de un lenguaje a otro (JSX -> JS)


Build : Es el proceso final de transformar/empaquetar todo para produccion (minificar, ofuscar, etc)


 
NodeJS + NPM (Node Package Manager) : Entorno de desarrollo para JS 



create-react-app y vite.js : Herramientas para crear proyectos de React

Next.js


Instalacion de App de React con vite : 

 1) Abrir una linea de comandos (cmd, etc)
 2) Ejecutar : npm create vite@latest
 3) 

1) npm create vite@latest *
2) cd <nombre del proyecto>
3) npm install
4) npm run dev



*si falla :
    git clone https://github.com/comisiones-coderhouse/comision_58385


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

CLASE 3 

JSX 

CRA :
    
        - index.js
        - package.json
        - node_modules
        - .gitignore
        - README.md
        - public
            - index.html
            - favicon.ico
        - src
           - App.css
           - App.js
           - App.test.js
           - index.css
           - index.js


VITE : 
    - package.json
    - node_modules
    - .gitignore
    - README.md
    - vite.config.js
    - .eslintrc.cjs
    - index.html
    - public
        - vite.svg
    - src   
        - App.css
        - App.js
        - index.css
        - main.js
        - main.jsx
        - logo.svg
        - index.html



"lo que no vite de react"




//archivo1.js
export let a = 1   (con llaves se importa)
export default b = 2 (sin llaves se importa)




//archivo2.js
import { a } from "./archivo1"
import b from "./archivo1"

console.log(a)


class App {}

function App(){}

const App = () => {}




CONVERSION DE JSX A JS :

      const header = document.createElement('header')
      const h1 = document.createElement('h1')
      header.id = 'header'
      h1.textContent = 'Titulo'
      header.appendChild(h1)
      document.body.appendChild(header)

      header.addEventListener('click', handleClick)
      header.addEventListener('click', ()=>{})


=======

      <header id="header" className="header">
        <h1>Titulo</h1>
      </header>






--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

CLASE 4


lo que nos quedo de la clase pasada : migracion de jsx a nuevos componentes

css : instalacion de tailwind y sass (extra OPCIONAL)

props y estados


 src/
    |_ui
        |_layout/
            |_Header.jsx
            |_Footer.jsx
            |_Main.jsx
            |_App.jsx
        |_components/
        |_pages/
    |_api/
        |_utils.js

Header/
    _ Header.jsx
    _ Header.css
    _ Header.test.js


import Button from "bootstrap/Button"

<button className="btn p-4">

<Button/>


https://tailwindcss.com/docs/guides/vite
https://ant.design/docs/react/introduce
https://mui.com/material-ui/
https://getbootstrap.com/
https://milligram.io/
https://chakra-ui.com/


PROPS : 

//definicion de funcion
function Header(props){}


//ejecucion de funcion
Header(1,"horacio",true)


<Header numero="" nombre="" buleano=""  />





--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

AFTER 1 :



--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

CLASE 5 

HOOKS

useState : sirve para tener variables reactivas. Por lo general lo voy a usar para hacer moficicaciones en el DOM del mismo componente donde esta el estado

useRef : sirve para formularios. Tenicamente sirve para guardar referencias del DOM en React

useEffect : sirve para cubrir codigo que queremos ejecutar con una determinada frecuencia


useContext : 

TODOS los hooks son funciones, y todos los hooks tienen que estar dentro de un componente, pero fuera de un condicional, bucle, etc



import { useState } from "react"


/* JS vanilla */

/* 

let contador = 0

const handleClick = () => {
    contador = contador + 1
    const p = document.querySelector("p")
    p.textContent = `Contador Actual : ${contador}`
}

const btn = document.querySelector(".btn")
btn.addEventListener("click", handleClick)
btn.addEventListener("click", ()=>{}) */

/* End JS vanilla */




function Contador() {

    //Sintaxis : 
    //const [variable,setVariable] = useState(valorInicial)
    const [contador,setContador] = useState(0)
    /* 
    const [dark,setDark] = useState(true)
    const [usuarios,setUsuarios] = useState([])
    const [currentUser,setCurrentUser] = useState({}) 
    const [nombre,setNombre] = useState("")
    const [edad,setEdad] = useState(0)
    */

    const handleClick = () => {
        //contador = contador + 1
        //contador++
        //contador+=1

        //Sintaxis : 
        //setFn(nuevoValorDelEstado)
        //setFn((valorActualDelEstado)=>{ return nuevoValorDelEstado})
        setContador(contador + 1)

        console.log("Sumar")
        console.log(contador)
    }

    return (
        <div>
            <p>Contador Actual : {contador}</p>
            <button onClick={handleClick} className="btn">sumar</button>
            {/*  <button onClick={()=>{ console.log("click") }} className="btn">sumar</button> */}
        </div>
    )
}

export default Contador




Patrones de diseño :  

Ej
    - MVC
    - MVVM
    - Flux
    - Redux


Patron Container : 
Patron Props Children : 
Patron Provider : 



--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------


CLASE 6

Reader 
XHR
FETCH 



fetch("http://miserver.com")
.then(()=>{
    return caches.open()
})
.then(()=>{
    
})
.catch(()=>{
    console.log("error")
})
.finally(()=>{})



//Mock(imitacion)
const promesa = new Promise((res,rej)=>{
    //aca esta la logica
    setTimeout(()=>{
        res([1,2,3,4,5])
    },2000)
})

console.log("Hola")

promesa.then((res)=>{
    console.log(res)
    console.log("Then")
})

promesa.catch((error)=>{
    console.log(error)
    console.log("Catch")
})

promesa.finally(()=>{
    console.log("Finally")
})

console.log(promesa)

//pipeline

//Triggers - Timers - Requests

//Triggers
/* 
document.addEventListener("click",()=>{
    console.log("Click")
}) 
*/

//Request
/* 

fetch()
.then(()=>{})
.catch(()=>{})

*/

//Timers
//setInterval(()=>{},1000)
//setTimeout(()=>{},1000)


//APIs
//APIs WEB
//APIs REST
//APIs GraphQL
//APIs SOAP

//HTTP
//Request : url/ip - metodo (GET,POST,PUT,PATCH,DELETE,etc)

/* fetch("https://jsonplaceholder.typicode.com/")

fetch("https://jsonplaceholder.typicode.com/users",{
  method : "POST"
})


 */

/* 


baseUrl : https://myapi.com/api/v1


Endpoints : 

  /users  : POST (params : {limit number})
  /users/:id : GET
  /users : POST  (params : {name string,lastname string,email string,phone number})

*/
/* 
fetch("https://myapi.com/api/v1/users")
fetch("https://myapi.com/api/v1/users",{
  method : "POST",
  body : {limit : 10}
})

 */




--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

CLASE 7 

const pedido = fetch('https://fakestoreapi.com/productss')

pedido.then((respuesta)=>{
  console.log(respuesta)
  if(respuesta.status < 400){
    console.log("termino el pedido bien")
  } else {
    console.log("termino el pedido mal")
  }
})

pedido.catch((error)=>{
  console.log("termino el pedido mal")
  console.log(error)
})



HTTP

Request 
    url google.com
    method POST
    headers
        Content-Type : application/json
    body
        { nombre : "hORACIO"}


Response
    status code
    status message
    headers 
        Access-Control-Allow-Origin
        Content-Type
        Content-Length
        Cache-Control 
        Accept
        Accept-Encoding
    body



    TEMAS DE AFTER

    modo esticto y abortcontroller
    useEffect



    useState(valor?) : [valor?,()=>{}]

    useRef(null) : {current:null}

    useEffect(function,array?) : void   = Sirve para ejecutar codigo con una determinada frecuencia (puede imitar los viejos ciclos de vida de un componente)


    function App (){

        //estados
        
        //Efectos

        //metodos

        //vista
         return ()
    }


    mount : constructor, render , componentDidMount
    update : shouldComponentUpdate , componentDidUpdate
    unmount : componentWillUnmount

    class App extends React.Component {
        
        componentDidMount(){
            fetch()
        }
        
        componentDidUpdate(){}

        constructor(props){}

        componentWillUnmount(){}

        shouldComponentUpdate(){}

        render(){}


    }




    useEffect(()=>{  })  : componentDidMount + componentDidUpdate

    useEffect(()=>{  },[])  : componentDidMount

    useEffect(()=>{  },[variable])  : componentDidMount + componentDidUpdate (solo si la variable cambio)

    useEffect(()=>{  },[variable1,variable2])  : componentDidMount + componentDidUpdate (solo si la variable1 o la variable2 cambio)

    useEffect(()=>{     ; return ()=>{}},[])   : componentDidMount + componentWillUnmount





    function Container() {
    
    //Estados
    const [state, setState] = useState([])
    const [loading, setLoading] = useState(true)


    //Efectos
    useEffect(()=>{
        const resultado = getProductos()
        resultado.then(productos=>{
            console.log("Termino de traerse productos")
            setState(productos)
            setLoading(false)
        })

        const intervalo = setInterval(()=>{
            console.log("Hola")
        },1000)

        //es la ultima cosa que se ejecuta antes del desmontaje del componente
        return () => {
            clearInterval(intervalo)
        }
    },[])
    
    
    //Vista
    if(loading) return <p>cargando...</p>

    return (
        <Presentacional state={state} />
    )
}

export default Container

  HACER REDACCION DEL CLICLO DE VIDA DEL CONTAINER : 


condicional ternario 

    const condicion = true


sentencia normal (no me quedo con ningun valor)
    if(condicion){
       return 1
    } else {
        return 2
    }


sentencia expresion (me quedo con un valor)
    const r = condicion ? 1 : 2

    const r = condicion && <p>1</p>

    const r = condicion || <p>2</p>

    const r = condicion 
                ? condicion2 
                    ? <p>1</p>
                    : <p>3</p>
                : <p>2</p> 

    const r = condicion 
                ? <p>1</p>
                : condicion2
                    ? <p>3</p>
                    : <p>2</p>


//Efectos
    useEffect(()=>{

        //aca van fetch que consigen datos inciales
        //timers
        //eventos de conexion
        //eventos que no le correspondan al jsx del componente
       
        const resultado = getProductos()
        resultado.then(productos=>{
            console.log("Termino de traerse productos")
            setState(productos)
            setLoading(false)
        })

        /* const intervalo = setInterval(()=>{
            console.log("Hola")
        },1000) */

        /* const handle = (e)=>{
            console.log("click")
            console.log(e.target)
        }

        document.addEventListener("click",handle) */

        //es la ultima cosa que se ejecuta antes del desmontaje del componente
        return () => {
            /* clearInterval(intervalo) */
            //document.removeEventListener("click",handle)
        }
    },[])



const arr = [{id:1},{id:2},{id:3},{id:4},{id:5}]

const arr_jsx = [<p>1</p>,<p>2</p>,<p>3</p>,<p>4</p>,<p>5</p>]



for(let indice = 0; indice < arr.length; indice++){
    const item = arr[i]
    console.log(item)
}

arr.forEach((item,indice)=>{
    
})

const r = arr.map((item,indice)=>{
    return item
})

//[undefined,undefined,undefined,undefined,undefined]
//[1,1,1,1,1]
//[1,2,3,4,5]

const r = arr.filter()
const r = arr.reduce()
const r = arr.find()
const r = arr.sort()


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------


CLASE 9

COmponentes de entrega

App 
    |_BrowserRouter
        |_NavBar 
            |_CartWidget
        |_Routes
            (path="/")
            |_ItemListContainer (useEffect + useState [])
                |_ItemList (props + map)
                    |_Item (props)

            (path="/category/:id")
            |_ItemListContainer (useEffect + useState [])
                |_ItemList (props + map)
                    |_Item (props)

            (path="/item/:id")
            |_ItemDetailContainer (useEffect + useState {})
                |_ItemDetail (useState + props)
                    |_ItemCount (useState + props)

            (path="/cart")
            |_Cart (?)


========================================================================================

CLASE 11


- State Uplifting : Es el camino inverso de hacer props, osea es pasarle datos de un componente hijo a un componente padre

    Implementacion : 
        - hacer una funcion(handle) en el componente padre
        - pasarle esa funcion(handle) al componente hijo (props)
        - recibir esa funcion(handle) en el componente hijo (props)
        - ejecutar esa funcion(handle) en el componente hijo (props | usualmente en un evento) 
        - pasarle datos a esa funcion(handle) en el componente hijo (los datos que querias subir)
        - recibir esos datos en el componente padre (los parentesis de la funcion(handle) que le pasaste al componente hijo)




- Context API : Es una forma de hacer State Uplifting ("global") pero sin pasarle props a los componentes intermedios

    contexto : es un espacio de alamacenamiento que se vuelve "global" dependiendo donde se ubique su Provider

    Provider : es un componente que se obtiene creando un contexto

Implementacion : 
    1) crear un contexto (createContext)
    2) le saco el Provider de adentro al contexto del paso 1 (Context.Provider)
    3) Ubicar el Provider en algun lugar de la app, de esta manera los demas componentes van a poder acceder a ese contexto
    4) Configurar el prop value del Provider con los datos que queremos compartir
    5) vas a cualquier otro componente y haces lo siguiente : 
    5.1)  importas el contexto 
    5.2)  importas el hook useContext
    5.3)    metes uno dentro del otro



========================================================================================


CLASE 12

Conceptos clave hasta ahora : 

1) Componentes : crearlos, hacer composicion 
2) Props : pasarle datos a los componentes (parametros)
3) Hooks : como concepto
4) Estados : cuando se actualizan, que pasa cuando se actualiza , como se modifica un estado (de manera correcta)
5) Efectos : Que se hace dentro de los efectos, relacion efecto/estado
6) Patron Container : Que haya un componente con logica de estado/efectos y que su/s hijos sean componentes presentacionales (osea solo que tengan JSX/props)
7) Rutas : Que Router elegir, como configurar las rutas, rutas dinamicas y links (moverme a traves de las rutas)
8) State Uplifting : La capacidad de mandarle informacion de un componente hjijo a un componente padre (lo opuesto a props)
9) Context API : La capacidad de crear un contexto y compartirlo a traves de un Provider (lo opuesto a props)
10) Patron Provider : 


Patron Provider : Encapsula la implementacion de un Contexto/Provider


========================================================================================

CLASE 13




Implentacion de Firebase/Firestore (WEB): 

1) ir a https://firebase.google.com/
2) login y crear un nuevo proyecto
3) ir a la consola del proyecto
4) ir a la seccion de Firestore o Todos los productos (depende de la version de firebase)
5) crear la base de datos en modo prueba
6) crear una coleccion llamada "productos" con un documento dentro (puede ser cualquier producto)
8) ir a project settings y activar una app que les da keys de firebase


Instalacion de Firebase/Firestore (CODIGO) :

1) npm install firebase
2) crear un archivo de configuracion  en la carpeta src y se guardan los keys de firebase
3) exportar e importar app 
4) hacer consultas


COMO HACER CONSULTAS : 

1) importar la variable app que quedo del paso 3 de la instalacion
2) importar la funcion getFirestore de firebase/firestore
3) ejecutar la funcion getFirestore con la variable app del paso 1, esto nos va a da una referencia a la base de datos
4) 






========================================================================================

CLASE 14

/Extraer la referencia de la base de datos
const db = getFirestore(app)

//Extraer la referencia de la coleccion de productos
const productosCollection = collection(db, "productos")

//Hacer la consulta (analogo a un fetch())
const consulta = getDocs(productosCollection)

consulta.then((resultado) => {
  //console.log(resultado) todo lo que me vino de la consultao
  //console.log(resultado.docs) un array con los documentos en "referencia" de la consulta
  //habria que recorrer el array de docs y por cada doc , extraerle la informacion
  //habria que juntar data() con .id para que quede un objeto producto con todo junto

  //console.log(resultado.empty)
  //console.log(resultado.size)
  /* console.log(resultado.docs)
  console.log(resultado.docs[0])
  console.log(resultado.docs[0].id)
  console.log(resultado.docs[0].data()) */

  /* 
  const productos = []

  resultado.docs.forEach(doc=>{
    const id = doc.id
    const data = doc.data()
    //const producto = {id, ...data}
    data.id = id
    productos.push(data)
  }) 
  */

  const productos = resultado.docs.map(doc => {
    const id = doc.id
    const data = doc.data()
    data.id = id
    return data
  })


  console.log(productos)



})

consulta.catch((err) => {
  console.log({ err })
})







TEMPLATE PARA PEDIR TODO : 

const db = getFirestore(app)
    const productosCollection = collection(db, "productos")
    const consulta = getDocs(productosCollection)

    consulta
      .then((resultado) => {
        const productos = resultado.docs.map(doc => {
          const id = doc.id
          const data = doc.data()
          data.id = id
          return data
        })
        
        setProductos(productos)
        toast.dismiss()

      }).catch((err) => {
        toast.error("Ocurrio un error al cargar los productos")
      })



FILTROS PARA CONSULTA CON GETDOCS : 

//const filtro = query(productosCollection,where("category","==","electronics"))
    //const filtro = query(productosCollection,where("category","==","clothing"))
    const filtro = query(productosCollection,
        where("category","==","clothing"),
        where("price",">",10))



https://www.npmjs.com/package/validator

https://react-hook-form.com/